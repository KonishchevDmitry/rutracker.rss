#!/usr/bin/env python

"""RuTracker.org RSS server."""

import datetime
import logging
import os
import sys

from wsgiref.simple_server import make_server

sys.path.insert(0, os.path.dirname(os.path.realpath(__file__)))

import PyRSS2Gen

import pycl.log
import pycl.main

from pycl import constants
from pycl.core import Error

import rutracker.torrents

LOG = logging.getLogger("rutracker.rss")


def application(environ, start_response):
    """Main entry point of the WSGI application."""

    http_headers = {}
    http_code = "500 Internal Server Error"

    method = environ["REQUEST_METHOD"]
    path = environ["PATH_INFO"]

    LOG.info(u"Handling %s request to %s...", method, path)

    try:
        if method != "GET":
            http_code = "405 Method Not Allowed"
            http_headers["Allow"] = "GET"
            raise Error("Unsupported HTTP method: {0}.", method)

        if path != "/rutracker.rss":
            http_code = "404 Not Found"
            raise Error("Invalid URL.")

        rss = PyRSS2Gen.RSS2(
            title = "RuTracker.org",
            link = "http://rutracker.org/",
            description = "RuTracker.org new torrents",

            items = [
                PyRSS2Gen.RSSItem(
                    title = torrent["name"],
                    link = "http://rutracker.org/viewtopic.php?t={id}".format(id = torrent["_id"]),
                    description = torrent["description"],
                    guid = PyRSS2Gen.Guid("http://rutracker.org/viewtopic.php?t={id}&time={time}".format(
                        id = torrent["_id"], time = torrent["time"]), isPermaLink = False),
                    pubDate = datetime.datetime.utcfromtimestamp(float(torrent["time"]))
                ) for torrent in rutracker.torrents.find(
                    age = 5 * constants.DAY_SECONDS, blocklist = True, sort = True, limit = 50,
                    fields = [ "_id", "description", "name", "time" ])
            ]
        ).to_xml("utf-8")
    except Exception as e:
        LOG.error("Failed to process the request to %s: %s", path, e)
        http_headers["Content-Type"] = "text/plain"
        http_body = [ http_code ]
    else:
        http_code = "200 OK"
        http_headers["Content-Type"] = "application/rss+xml"
        http_body = [ rss ]
    finally:
        start_response(http_code, http_headers.items())
        return http_body


def serve(host, port):
    """Simple HTTP server for development."""

    LOG.info("Running HTTP server on %s:%s...", host, port)
    server = make_server(host, port, application)
    server.serve_forever()


pycl.main.set_environment()
pycl.log.setup()

if __name__ == "__main__":
    serve("0.0.0.0", 8080)
